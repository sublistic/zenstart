// _variables
@import 'variables';

// button settings
@mixin button-settings {
	display: inline-block;
	font-size: $font-size-small;
	padding: 7px 20px;
}

// button mixins
@mixin button($color, $background, $border) {
	@include button-settings;

	&, &:visited {
		background-color: $background;
		border: 1px solid $border;
		color: $color;
		text-decoration: none;
	}

	&:hover, &:focus, &:active {
		background-color: mix(#000, $background, 20%);
		border-color: mix(#000, $border, 20%);
		color: $color;
		text-decoration: none;
	}
}

@mixin button-wire($color, $hover-color, $border, $border-size) {
	@include button-settings;

	&, &:visited {
		background-color: transparent;
		border: $border-size solid $border;
		color: $color;
		text-decoration: none;
	}

	&:hover, &:focus, &:active {
		background-color: $border;
		border-color: $border;
		color: $hover-color;
		text-decoration: none;
	}
}

// make container
@mixin make-container {
	display: block;
	margin-left: auto;
	margin-right: auto;
	padding-left: 15px;
	padding-right: 15px;


	&::before, &::after {
		content: '';
		display: table;
	}

	&::after {
		clear: both;
	}

	@include sm {
		width: 750px;
	}

	@include md {
		width: 970px;
	}

	@include lg {
		width: 1170px;
	}
}

// column helpers
@mixin column-center {
	float: none !important;
	margin-left: auto;
	margin-right: auto;
}

@mixin column-center-xs {
	float: none !important;
	margin-left: auto;
	margin-right: auto;

	@include sm {
		float: left !important;
		margin-left: 0;
		margin-right: 0;
	}
}

// text helpers
@mixin text-center-xs {
	text-align: center;

	@include sm {
		text-align: inherit;
	}
}

@mixin text-center-xxs {
	@include xxs {
		text-align: center;
	}
}

/// block grid ///
// grid container
@mixin make-block-grid-container {
	@include clearfix;
	margin-left: ($grid-gutter-width / -2);
	margin-right: ($grid-gutter-width / -2);

	> * {
		margin-bottom: $grid-gutter-width;
		min-height: 1px;
		padding-left: ($grid-gutter-width / 2);
		padding-right: ($grid-gutter-width / 2);
		position: relative;
	}
}

// create the grids
@mixin create-grid($blocks) {
	float: left;
	width: percentage(1 / $blocks);

	&:nth-of-type(1n) {
		clear: none;
	}

	&:nth-of-type(#{$blocks}n+1) {
		clear: both;
	}
}

// individual block grids
@mixin make-xxs-block-grid ($blocks) {

	@include xxs {
		@include create-grid($blocks);
	}
}

@mixin make-xs-block-grid ($blocks) {

	@include xs {
		@include create-grid($blocks);
	}
}

@mixin make-sm-block-grid ($blocks) {

	@include sm {
		@include create-grid($blocks);
	}
}

@mixin make-md-block-grid ($blocks) {

	@include md {
		@include create-grid($blocks);
	}
}

@mixin make-lg-block-grid ($blocks) {

	@include lg {
		@include create-grid($blocks);
	}
}

// block-grid shorthand mixin
// usage:	@include make-block-grid(1,2,3,4,6)
@mixin make-block-grid ($cols-xxs, $cols-xs, $cols-sm, $cols-md, $cols-lg) {
	@include make-block-grid-container();

	> * {
		@include make-xxs-block-grid($cols-xxs);
		@include make-xs-block-grid($cols-xs);
		@include make-sm-block-grid($cols-sm);
		@include make-md-block-grid($cols-md);
		@include make-lg-block-grid($cols-lg);
	}
}

/// media queries ///
@mixin xs { // xs >= 480px
	@media (min-width: $screen-xs-min) {
		@content;
	}
}

@mixin sm { // sm >= 768px
	@media (min-width: $screen-sm-min) {
		@content;
	}
}

@mixin md { // md >= 992px
	@media (min-width: $screen-md-min) {
		@content;
	}
}

@mixin lg { // lg >= 1200px
	@media (min-width: $screen-lg-min) {
		@content;
	}
}

@mixin xl { // xl >= 1440px
	@media (min-width: 1440px) {
		@content;
	}
}

// hackity hack
@mixin xxs { // xxs < 480px
	@media (max-width: ($screen-xs-min) - 1px) {
		@content;
	}
}


/// extra mixins ///

// box sizing
@mixin box-sizing($boxmodel) {
	-webkit-box-sizing: $boxmodel;
	-moz-box-sizing: $boxmodel;
	box-sizing: $boxmodel;
}

// box-shadow
@mixin box-shadow($shadow...) {
	-webkit-box-shadow: $shadow; // iOS <4.3 & Android <4.1
	box-shadow: $shadow;
}

// clearfix
@mixin clearfix() {
	&:before, &:after {
		content: " ";
		display: table;
	}
	&:after {
		clear: both;
	}
}

// transitions
@mixin transition($transition...) {
	-webkit-transition: $transition;
	-o-transition: $transition;
	transition: $transition;
}
@mixin transition-property($transition-property...) {
	-webkit-transition-property: $transition-property;
	transition-property: $transition-property;
}
@mixin transition-delay($transition-delay) {
	-webkit-transition-delay: $transition-delay;
	transition-delay: $transition-delay;
}
@mixin transition-duration($transition-duration...) {
	-webkit-transition-duration: $transition-duration;
	transition-duration: $transition-duration;
}
@mixin transition-timing-function($timing-function) {
	-webkit-transition-timing-function: $timing-function;
	transition-timing-function: $timing-function;
}
@mixin transition-transform($transition...) {
	-webkit-transition: -webkit-transform $transition;
	-moz-transition: -moz-transform $transition;
	-o-transition: -o-transform $transition;
	transition: transform $transition;
}